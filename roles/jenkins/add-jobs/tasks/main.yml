#- name: 作業用ディレクトリを初期化する
#  become: yes
#  file:
#    path: '{{ work_dir }}'
#    state: absent
#
#- name: 作業用ディレクトリを作成する
#  become: yes
#  file:
#    path: '{{ work_dir }}'
#    state: directory
#    mode: 0755
#
#- name: Jenkinsが利用するSSHDポートを取得する
#  shell: curl -v http://localhost:8080/jenkins/login 2>&1 | grep SSH-Endpoint | cut -d':' -f3
#  args:
#    warn: false
#  register: JENKINS_SSHD_PORT
#
#- name: JenkinsへPluginをインストールする
#  shell: "sudo -u {{ jenkins_admin_user }}
#          ssh
#          -o StrictHostKeyChecking=no
#          -l {{ jenkins_admin_user }}
#          -p {{ JENKINS_SSHD_PORT.stdout }}
#          localhost
#          install-plugin job-dsl"
#
#- name: Jenkinsを再起動する
#  become: yes
#  service:
#    name: jenkins
#    state: restarted
#
#- name: Jenkinsが起動するまで待機する
#  wait_for:
#    timeout: 30
#
#- name: Jobリストの定義ファイルを取得する
#  become: yes
#  git:
#    repo: '{{ joblist_definition_file_url }}'
#    dest: "{{ work_dir }}/joblist"
#    version: '{{ joblist_repo_version }}'
#
#- name: Jobリスト定義ファイルをAnsibleコントロールマシーンへ取得する
#  fetch:
#    src: "{{ work_dir }}/joblist/job-list.yaml"
#    dest: /tmp/
#    flat: yes
#
- name: Jobリスト定義ファイルを動的にAnsibleの変数ファイルとして読み込む
  include_vars:
    file: /tmp/job-list.yaml

- name: インストールするJobのリポジトリからJenkinsfileを取得する
  become: yes
  git:
    repo: '{{ item.0.url }}'
    dest: "{{ work_dir }}/{{ item.0.name }}"
    version: '{{ item.0.version }}'
  with_subelements:
    - "{{ jenkins_joblists }}"
    - lists

- name: 登録するJobのリストを作成する
  become: yes
  shell: "find {{ item.1 }} -type f -name Jenkinsfile"
  args:
    chdir: "{{ work_dir }}/{{ item.0.name }}"
  register: JOB_LISTS
  with_subelements:
    - "{{ jenkins_joblists }}"
    - lists

- name: var_dump JOB_LIST
  debug:
    var: JOB_LISTS

- name: var_dump JOB_LIST.results
  debug:
    var: JOB_LISTS.results

#- name: echo item.0
#  shell: "echo {{ item.0 }}"
#  with_subelements:
#    -  "{{ JOB_LISTS.results }}"
#    - stdout_lines

- name: command echo item.0.stdout
  command: "echo {{ item.0.stdout.item }}"
  with_subelements:
    -  "{{ JOB_LISTS.results | default([]) }}"
    - stdout_lines

# This expression would fail
#- name: echo item.0.stdout
#  shell: "echo {{ item.0.stdout }}"
#  with_subelements:
#    -  "{{ JOB_LISTS.results }}"
#    - stdout_lines

# This expression would fail
#- name: var_dump JOB_LIST.results / item
#  debug:
#    var: item
#  with_dict: JOB_LISTS.results

# This expression would fail
#- name: echo JOB_LIST.results / item.item.url
#  shell: "echo {{ item.item.url }}"
#  with_items:
#    - "{{ JOB_LISTS.results }}"

# This expression would fail
#- name: echo JOB_LIST.results / item.url
#  shell: "echo {{ item.url }}"
#  with_items:
#    - "{{ JOB_LISTS.results }}"

- name: echo JOB_LIST.results / item.cmd
  shell: "echo {{ item.cmd }}"
  with_items:
    - "{{ JOB_LISTS.results }}"

# This expression would fail
#- name: echo JOB_LIST.results / item.cmd / with_dict
#  shell: "echo {{ item.cmd }}"
#  with_dict:
#    - "{{ JOB_LISTS.results }}"

- name: echo JOB_LIST.results / item.item.0.cmd
  shell: "echo {{ item.item.0.cmd }}"
  with_list:
    - "{{ JOB_LISTS.results }}"

- name: echo JOB_LIST.results / item[0].stdout
  shell: "echo {{ item[0].stdout }}"
  with_items: "{{ JOB_LISTS.results }}"

- name: echo JOB_LIST.results / item.stdout
  shell: "echo {{ item.stdout }}"
  with_items: "{{ JOB_LISTS.results }}"

- name: echo JOB_LIST.results / item[0].stdout
  shell: "echo {{ item[0].stdout }}"
  with_items: "{{ JOB_LISTS.results }}"

- name: echo JOB_LIST.results / item.value.name
  shell: "echo {{ item.value.name }}"
  with_list:
    - "{{ JOB_LISTS.results }}"

- name: echo JOB_LIST.results / item.end
  shell: "echo {{ item.0.end }}"
  with_items: JOB_LISTS.results

- name: var_dump JOB_LIST.results / item
  debug:
    var: item
  with_lists:  JOB_LISTS.results

- name: var_dump JOB_LIST.results / item.end
  debug:
    var: item.end
  with_items: JOB_LISTS.results

- name: var_dump item
  debug:
    var: "{{ item }}"
  with_subelements:
    -  "{{ JOB_LISTS.results }}"
    - stdout_lines

- name: var_dump item.stdout
  debug:
    var: "{{ item.stdout }}"
  with_subelements:
    -  "{{ JOB_LISTS.results }}"
    - stdout_lines

- name: var_dump item.0
  debug:
    var: "{{ item.0 }}"
  with_subelements:
    -  "{{ JOB_LISTS.results }}"
    - stdout_lines

- name: var_dump item.0.stdout
  debug:
    var: "{{ item.0.stdout }}"
  with_subelements:
    -  "{{ JOB_LISTS.results }}"
    - stdout_lines

- name: var_dump item.1.stdout
  debug:
    var: "{{ item.1.stdout }}"
  with_subelements:
    -  "{{ JOB_LISTS.results }}"
    - stdout_lines

#- name: ディレクトリへJob DLS用の定義ファイルを作成する
#  become: yes
#  shell: "create-seed-jobs.sh {{ item }}"
#  args:
#    chdir: '{{ work_dir }}'
#  with_items: JOB_LIST.stdout
#
#- name: JenkinsへJob登録用Jobを登録する
#  become: yes
#  shell:
#  with_times:
#
