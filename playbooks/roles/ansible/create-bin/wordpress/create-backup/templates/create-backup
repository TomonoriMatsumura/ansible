PROGNAME=$(basename $0)
VERSION="0.1"

usage() {
    echo "Usage: $PROGRAM [OPTIONS] FILE"
    echo "  This script is ~."
    echo
    echo "Options:"
    echo "  -h, --help"
    echo
    echo "  --version"
    echo
    echo "  --backup_data_dir ARGUMENT"
    echo "          バックアップデータを保存するディレクトリ"
    echo "          初期値は「wordpress-backup」" 
    echo
    echo "  --backup_data_path ARGUMENT"
    echo "          バックアップデータを保存するパス"
    echo "          初期値は「/var/www/html/{ backup_data_dir }」" 
    echo
    echo "  --backup_work_dir ARGUMENT"
    echo "          作業用ディレクトリ"
    echo "          初期値は「/tmp/wordpress-backup」" 
    echo
    echo "  --db_dump_data_sql ARGUMENT"
    echo "          データベースダンプファイルのファイル名"
    echo "          初期値は「wordpress.sql」" 
    echo
    echo "  --wp_installed_path ARGUMENT"
    echo "          Wordpressがインストールされているパス"
    echo "          初期値は「/var/www/html/wordpress」" 
    echo
    exit 1
}

EXTRA_VARS=""

for OPT in "$@"
do
    case "$OPT" in
        '-h'|'--help' )
            usage
            exit 1
            ;;

        '--version' )
            echo $VERSION
            exit 1
            ;;

        '--backup_data_dir' )
            if [[ -z "$2" ]] || [[ "$2" =~ ^-+ ]]; then
                echo "RPROGRAM: option requires an argument -- $1"
                exit 1
            fi
            EXTRA_VARS="${EXTRA_VARS} backup_data_dir=$2"
            shift 1 
            ;;

        '--backup_data_path' )
            if [[ -z "$2" ]] || [[ "$2" =~ ^-+ ]]; then
                echo "RPROGRAM: option requires an argument -- $1"
                exit 1
            fi
            EXTRA_VARS="${EXTRA_VARS} backup_data_path=$2"
            shift 1
            ;;

        '--backup_data_dir' )
            if [[ -z "$2" ]] || [[ "$2" =~ ^-+ ]]; then
                echo "RPROGRAM: option requires an argument -- $1"
                exit 1
            fi
            EXTRA_VARS="${EXTRA_VARS} backup_data_dir=$2"
            shift 1
            ;;

        '--db_dump_data_sql' )
            if [[ -z "$2" ]] || [[ "$2" =~ ^-+ ]]; then
                echo "RPROGRAM: option requires an argument -- $1"
                exit 1
            fi
            EXTRA_VARS="${EXTRA_VARS} db_dump_data_sql=$2"
            shift 1
            ;;

        '--wp_installed_path' )
            if [[ -z "$2" ]] || [[ "$2" =~ ^-+ ]]; then
                echo "RPROGRAM: option requires an argument -- $1"
                exit 1
            fi
            EXTRA_VARS="${EXTRA_VARS} wp_installed_path=$2"
            shift 1
            ;;

        '--'|'-' )
            shift 1
            param+=( "$@" )
            break
            ;;

        -*)
            echo "$PROGNAME: illegal option -- '$(echo $1 | sed 's/^-*//')'" 1>&2
            exit 1
            ;;

        *)
            if [[ ! -z "$1" ]] && [[ ! "$1" =~ ^-x ]]; then
                param+=( "$1" )
                shift 1
            fi
            ;;
    esac
done


export ANSIBLE_HOST_KEY_CHECKING=False

# ログファイルのパスを設定する
LOG_PATH="/home/ansible/ansible/bin/wordpress_create-backup-{{ item.key }}.log"
rm -rf ${LOG_PATH}
export ANSIBLE_LOG_PATH=${LOG_PATH}

if [ ! -z "${EXTRA_VARS}" ]; then
    EXTRA_VARS_ARGS="--extra-vars \"${EXTRA_VARS}\""
fi

expect -c "

    set timeout -1

    spawn ansible-playbook {{ ansible_user_dir }}/ansible/playbooks/wordpress_create-backup.yml --become-method=su --ask-become-pass -i "{{ item.key }}:{{ ssh_port }}," -u ansible --ask-vault-pass `echo ${EXTRA_VARS_ARGS}`

    expect "SU*"

    send -- \"{{ item.value.password }}\n\"

    expect "Vault*password"

    send \"{{ vault_password }}\n\"

    expect "Enter*passphrase"

    send \"{{ vault_password }}\n\"

    expect eof
    exit
    "    

# SSH接続が失敗している場合はステータス「1」を返して終了する
if tail -n 1 ${LOG_PATH} | grep unreachable=1 ; then
    exit 1
fi

# 処理が失敗している場合はステータス「1」を返して終了する
if ! tail -n 1 ${LOG_PATH} | grep failed=0 ; then
    exit 1
fi
