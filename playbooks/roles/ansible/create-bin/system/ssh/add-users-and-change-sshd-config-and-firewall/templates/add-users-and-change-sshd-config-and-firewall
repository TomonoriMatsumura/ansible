PROGNAME=$(basename $0)

usage() {
    echo "Usage: $PROGRAM [OPTIONS] FILE"
    echo "  This script is ~."
    echo
    echo "Options:"
    echo "  -h, --help"
    echo
    echo "  --invetory ARGUMENT"
    echo "          playbookのinventoryを指定する。"
    echo "          この値は必ず指定する事。"
    echo
    echo "  --redmine_ip ARGUMENT"
    echo "          RedmineがインストールされているサーバのIPアドレス。"
    echo "          対象ノードがGitリポジトリにアクセスする際に必要になる。"
    echo "          この値は必ず指定する事。"
    echo
    echo "  --ssh_password ARGUMENT"
    echo "          接続対象ノードのSSHパスワードを指定する。"
    echo "          この値は必ず指定する事。"
    echo
    echo "  --ssh_port ARGUMENT"
    echo "          接続対象ノードのSSHポート番号を指定する。"
    echo "          この値は必ず指定する事。"
    echo
    echo "  --vault_password ARGUMENT"
    echo "          ansible vault パスワード "
    echo "          この値は必ず指定する事。" 
    echo
    exit 1
}

# 変数を初期化する
INVENTORY=
REDMINE_IP=
SSH_PASSWORD=
SSH_PORT=
VAULT_PASSWORD=


for OPT in "$@"
do
    case "$OPT" in
        '-h'|'--help' )
            usage
            exit 1
            ;;

        '--inventory' )
            if [[ -z "$2" ]] || [[ "$2" =~ ^-+ ]]; then
                echo "$RPROGRAM: option requires an argument -- $1"
                exit 1
            fi

            INVENTORY="$2"
            shift 1
            ;;

        '--redmine_ip' )
            if [[ -z "$2" ]] || [[ "$2" =~ ^-+ ]]; then
                echo "$RPROGRAM: option requires an argument -- $1"
                exit 1
            fi

            REDMINE_IP="$2"
            shift 1
            ;;

        '--ssh_password' )
            if [[ -z "$2" ]] || [[ "$2" =~ ^-+ ]]; then
                echo "$RPROGRAM: option requires an argument -- $1"
                exit 1
            fi

            SSH_PASSWORD="$2"
            shift 1
            ;;

        '--ssh_port' )
            if [[ -z "$2" ]] || [[ "$2" =~ ^-+ ]]; then
                echo "$RPROGRAM: option requires an argument -- $1"
                exit 1
            fi

            SSH_PORT="$2"
            shift 1
            ;;

        '--vault_password' )
            if [[ -z "$2" ]] || [[ "$2" =~ ^-+ ]]; then
                echo "$RPROGRAM: option requires an argument -- $1"
                exit 1
            fi

            VAULT_PASSWORD="$2"
            shift 1
            ;;

        '--'|'-' )
            shift 1
            param+=( "$@" )
            break
            ;;

        -*)
            echo "$PROGNAME: illegal option -- '$(echo $1 | sed 's/^-*//')'" 1>&2
            exit 1
            ;;

        *)
            if [[ ! -z "$1" ]] && [[ ! "$1" =~ ^-x ]]; then
                param+=( "$1" )
                shift 1
            fi
            ;;
    esac
done


# inventoryが引数で渡されていない場合は処理を終了する
if [[ -z "${INVENTORY}" ]] || [[ "${INVENTORY}" =~ ^-+ ]]; then
    echo "$RPROGRAM: inventory option requires"
    exit 1
fi

# RedmineがインストールされているサーバのIPアドレスが引数で渡されていない場合は処理を終了する
if [[ -z "${REDMINE_IP}" ]] || [[ "${REDMINE_IP}" =~ ^-+ ]]; then
    echo "$RPROGRAM: redmine_ip option requires"
    exit 1
fi

# ssh パスワードが引数で渡されていない場合は処理を終了する
if [[ -z "${SSH_PASSWORD}" ]] || [[ "${SSH_PASSWORD}" =~ ^-+ ]]; then
    echo "$RPROGRAM: ssh_password option requires"
    exit 1
fi

# ssh ポート番号が引数で渡されていない場合は処理を終了する
if [[ -z "${SSH_PORT}" ]] || [[ "${SSH_PORT}" =~ ^-+ ]]; then
    echo "$RPROGRAM: ssh_port option requires"
    exit 1
fi

# ansible vault パスワードが引数で渡されていない場合は処理を終了する
if [[ -z "${VAULT_PASSWORD}" ]] || [[ "${VAULT_PASSWORD}" =~ ^-+ ]]; then
    echo "$RPROGRAM: vault_password option requires"
    exit 1
fi


export ANSIBLE_HOST_KEY_CHECKING=False

rm -rf {{ ansible_user_dir }}/.ssh/known_hosts

# ログファイルのパスを設定する
LOG_PATH="{{ ansible_user_dir }}/ansible/log/system_ssh_add-users-and-change-sshd-config-and-firewall.log"
rm -rf ${LOG_PATH}
export ANSIBLE_LOG_PATH=${LOG_PATH}


expect -c "

    set timeout -1

    spawn ansible-playbook {{ ansible_user_dir }}/ansible/playbooks/system_ssh_add-users-and-change-sshd-config-and-firewall.yml -u root -k -i "${INVENTORY}" --ask-vault-pass -e "ssh_port=${SSH_PORT}" -e "redmine_ip=${REDMINE_IP}" -c paramiko

    expect "SSH*"

    send -- \"${SSH_PASSWORD}\n\"

    expect "Vault*password"

    send \"${VAULT_PASSWORD}\n\"

    expect eof
    exit
    "    

# SSH接続が失敗している場合はステータス「1」を返して終了する
if tail -n 1 ${LOG_PATH} | grep unreachable=1 ; then
    exit 1
fi

# 処理が失敗している場合はステータス「1」を返して終了する
if ! tail -n 1 ${LOG_PATH} | grep failed=0 ; then
    exit 1
fi
